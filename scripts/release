#!/usr/bin/env bash
set -e

function command_available() {
  local command="$1"
  command -v "$command" &>/dev/null
}

function fail() {
  >&2 echo "$@"
  exit 1
}

for required_command in dgstore git gzip jq sed sponge; do
  command_available "$required_command" || fail "$required_command command not found in PATH"
done

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
root_dir="$(dirname "$script_dir")"
test -x "${root_dir}/bin/scide" || fail "Cannot find executable scide script in root directory ${root_dir}"

test -z "$(git status --porcelain)" || fail "Commit changes before releasing"

current_version="$(./bin/scide --version)"
version="$1"
[ $# -lt 1 ] && fail "The version to release must be provided as the first argument (current: $current_version)"
[ $# -gt 1 ] && fail "This script only takes one argument"
[[ "$version" =~ ^[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$ ]] || fail "Version '${version}' is not a valid semver version"

echo
echo "Preparing release..."
release_dir="${root_dir}/release"
test -d "$release_dir" && rm -fr "$release_dir"
mkdir "$release_dir"
compressed_release_script="${release_dir}/scide_v${version}.gz"
cat "${root_dir}/bin/scide" | gzip -c > "${compressed_release_script}"
dgstore "$compressed_release_script"
signature_file="${compressed_release_script}.sig"
gpg --output "$signature_file" --detach-sign "$compressed_release_script"

echo
echo "Updating version from ${current_version} to ${version}..."
sed -i '' "s/version=.*/version=${version}/" bin/scide
sed -i '' "s/v.*\/scide_v.*.gz/v${version}\/scide_v${version}.gz/" README.md
jq ".message = \"${version}\"" badge.json | sponge badge.json

echo
echo "Committing..."
git add badge.json bin/scide
git commit -m "v${version}"

echo
echo "Creating tag v${version}..."
git tag "v${version}"

echo
echo "Pushing..."
git push --tags origin main

# Release to homebrew.
"$script_dir/homebrew"

open "$release_dir"
